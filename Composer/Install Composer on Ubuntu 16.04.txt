Install composer on Ubuntu 16.04
# user is <Username>. do not sudo su

$ sudo apt-get update
$ sudo apt-get install curl php-cli php-mbstring git unzip
$ cd ~
$ curl -sS https://getcomposer.org/installer -o composer-setup.php
$ sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
$ chown <Username>:<Username> ~/.composer
$ chown <Username>:<Username> ~/.composer/*.*
$ php composer-setup.php
$ sudo cp ./composer.phar /usr/local/bin
$ sudo mv ./composer.phar /var/www/html
$ sudo rm -fr .composer
$ cd ~
$ mkdir backupscalendar
$ cd backupscalendar
$ composer create-project --prefer-dist laravel/laravel kalendaryo
$ php composer.phar require google/<Site>client:^2.0
$ cp /tmp/vendor /var/www/html/
$ cd /var/www/html
$ chmod 777 vendor
$ chown <Username>:<Username> vendor
#cd vendor
$ chmod 777 * -R
$ chown <Username>:<Username> * -R
$ cd /var/www/html
$ nano quickstart.php
<?php
require_once __DIR__ . '/vendor/autoload.php';


define('APPLICATION_NAME', 'Google Calendar <Site> PHP Quickstart');
define('CREDENTIALS_PATH', '~/.credentials/calendar-php-quickstart.json');
define('CLIENT_SECRET_PATH', __DIR__ . '/client_secret.json');
// If modifying these scopes, delete your previously saved credentials
// at ~/.credentials/calendar-php-quickstart.json
define('SCOPES', implode(' ', array(
  Google_Service_Calendar::CALENDAR_READONLY)
));

date_default_timezone_set('America/New_York'); // Prevent DateTime tz exception
if (php_s<Site>_name() != 'cli') {
  throw new Exception('This application must be run on the command line.');
}

/**
 * Returns an authorized <Site> client.
 * @return Google_Client the authorized client object
 */
function getClient() {
  $client = new Google_Client();
  $client->setApplicationName(APPLICATION_NAME);
  $client->setScopes(SCOPES);
  $client->setAuthConfig(CLIENT_SECRET_PATH);
  $client->setAccessType('offline');

  // Load previously authorized credentials from a file.
  $credentialsPath = expandHomeDirectory(CREDENTIALS_PATH);
  if (file_exists($credentialsPath)) {
    $access = json_decode(file_get_contents($credentialsPath), true);
  } else {
    // Request authorization from the user.
    $authUrl = $client->createAuthUrl();
    printf("Open the following link in your browser:\n%s\n", $authUrl);
    print 'Enter verification code: ';
    $authCode = trim(fgets(STDIN));

    // Exchange authorization code for an access .
    $access = $client->fetchAccessWithAuthCode($authCode);

    // Store the credentials to disk.
    if(!file_exists(dirname($credentialsPath))) {
      mkdir(dirname($credentialsPath), 0700, true);
    }
    file_put_contents($credentialsPath, json_encode($access));
    printf("Credentials saved to %s\n", $credentialsPath);
  }
  $client->setAccess($access);

  // Refresh the  if it's expired.
  if ($client->isAccessExpired()) {
    $client->fetchAccessWithRefresh($client->getRefresh());
    file_put_contents($credentialsPath, json_encode($client->getAccess()));
  }
  return $client;
}

/**
 * Expands the home directory alias '~' to the full path.
 * @param string $path the path to expand.
 * @return string the expanded path.
 */
function expandHomeDirectory($path) {
  $homeDirectory = getenv('HOME');
  if (empty($homeDirectory)) {
    $homeDirectory = getenv('HOMEDRIVE') . getenv('HOMEPATH');
  }
  return str_replace('~', realpath($homeDirectory), $path);
}

// Get the <Site> client and construct the service object.
$client = getClient();
$service = new Google_Service_Calendar($client);

// Print the next 10 events on the user's calendar.
$calendarId = 'primary';
$optParams = array(
  'maxResults' => 10,
  'orderBy' => 'startTime',
  'singleEvents' => TRUE,
  'timeMin' => date('c'),
);
$results = $service->events->listEvents($calendarId, $optParams);

if (count($results->getItems()) == 0) {
  print "No upcoming events found.\n";
} else {
  print "Upcoming events:\n";
  foreach ($results->getItems() as $event) {
    $start = $event->start->dateTime;
    if (empty($start)) {
      $start = $event->start->date;
    }
    printf("%s (%s)\n", $event->getSummary(), $start);
  }
}

# clone the vm, if the following process works only once.
$ php quickstart.php

