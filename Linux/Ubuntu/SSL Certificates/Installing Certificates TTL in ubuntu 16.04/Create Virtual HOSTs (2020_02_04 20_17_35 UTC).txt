//* Creating Virtual Host for Apache
//* Creating virtual host configurations on your Apache server does not magically cause DNS entries to be created for 
//* those host names. You must have the names in DNS, resolving to your IP address, or nobody else will be able to see 
//* your web site. You can put entries in your hosts file for local testing, but that will work only from the machine 
//* with those hosts entries.

$ nano /etc/apache2/sites-enabled/nagios.conf

1) Running several name-based web sites on a single IP address
	# Your server has multiple hostnames that resolve to a single address, and you want to respond differently
	# for www.example.com and www.example.org.
	Listen 80			# Ensure that Apache listens on port 80
	<VirtualHost *:80>		//* The asterisks match all addresses
	    DocumentRoot "/www/example1"
	    ServerName www.example.com	//* default. This will be shown if no natches for ServeName
	    # Other directives here
	</VirtualHost>
	<VirtualHost *:80>
	    DocumentRoot "/www/example2"
	    ServerName www.example.org
	    # Other directives here
	</VirtualHost>


2) Name-based hosts on more than one IP address.
	# The server has two IP addresses. On one (XXX.XXX.XXX.40), we will serve the "main" server, server.example.com
	# and on the other (XXX.XXX.XXX.50), we will serve two or more virtual hosts.
	Listen 80
	# This is the "main" server running on XXX.XXX.XXX.40
	ServerName server.example.com
	DocumentRoot "/www/mainserver"
	<VirtualHost XXX.XXX.XXX.50>
	    DocumentRoot "/www/example1"
	    ServerName www.example.com
	    # Other directives here ...
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.50>
	    DocumentRoot "/www/example2"
	    ServerName www.example.org
	    # Other directives here ...
	</VirtualHost>

3) Serving the same content on different IP addresses (such as an internal and external address).
	# The server machine has two IP addresses (XXX.XXX.XXX.1 and XXX.XXX.XXX.40). The machine is sitting between
	# an internal (intranet) network and an external (internet) network. Outside of the network, the name 
	# server.example.com resolves to the external address (XXX.XXX.XXX.40), but inside the network, that same 
	# name resolves to the internal address (XXX.XXX.XXX.1).
	<VirtualHost XXX.XXX.XXX.1 XXX.XXX.XXX.40>
	    DocumentRoot "/www/server1"
	    ServerName server.example.com
	    ServerAlias server
	</VirtualHost>

4) Running different sites on different ports.
	# You have multiple domains going to the same IP and also want to serve multiple ports. The example
	# below illustrates that the name-matching takes place after the best matching IP address and port
	# combination is determined.
	Listen 80
	Listen 8080
	<VirtualHost XXX.XXX.XXX.40:80>
	    ServerName www.example.com
	    DocumentRoot "/www/domain-80"
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40:8080>
	    ServerName www.example.com
	    DocumentRoot "/www/domain-8080"
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40:80>
	    ServerName www.example.org
	    DocumentRoot "/www/otherdomain-80"
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40:8080>
	    ServerName www.example.org
	    DocumentRoot 
	</VirtualHost>

5) IP-based virtual hosting
	# The server has two IP addresses (XXX.XXX.XXX.40 and XXX.XXX.XXX.50) which resolve to the names www.example.com
	# and www.example.org respectively.
	Listen 80
	<VirtualHost XXX.XXX.XXX.40>		//* default one
	    DocumentRoot "/www/example1"
	    ServerName www.example.com
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.50>
	    DocumentRoot "/www/example2"
	    ServerName www.example.org
	</VirtualHost>

6) Mixed port-based and ip-based virtual hosts
	# The server machine has two IP addresses (XXX.XXX.XXX.40 and XXX.XXX.XXX.50) which resolve to the names
	# www.example.com and www.example.org respectively. In each case, we want to run hosts on ports 80 and 8080.
	Listen XXX.XXX.XXX.40:80
	Listen XXX.XXX.XXX.40:8080
	Listen XXX.XXX.XXX.50:80
	Listen XXX.XXX.XXX.50:8080
	<VirtualHost XXX.XXX.XXX.40:80>
	    DocumentRoot "/www/example1-80"
	    ServerName www.example.com
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40:8080>
	    DocumentRoot "/www/example1-8080"
	    ServerName www.example.com
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.50:80>
	    DocumentRoot "/www/example2-80"
	    ServerName www.example.org
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.50:8080>
	    DocumentRoot "/www/example2-8080"
	    ServerName www.example.org
	</VirtualHost>

7) Mixed name-based and IP-based vhosts
	# Any address mentioned in the argument to a virtualhost that never appears in another virtual host is a 
	# strictly IP-based virtual host.
	Listen 80
	<VirtualHost XXX.XXX.XXX.40>
	    DocumentRoot "/www/example1"
	    ServerName www.example.com
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40>
	    DocumentRoot "/www/example2"
	    ServerName www.example.org
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40>
	    DocumentRoot "/www/example3"
	    ServerName www.example.net
	</VirtualHost>
	# IP-based
	<VirtualHost XXX.XXX.XXX.50>
	    DocumentRoot "/www/example4"
	    ServerName www.example.edu
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.60>
	    DocumentRoot "/www/example5"
	    ServerName www.example.gov
	</VirtualHost>

8) Using Virtual_host and mod_proxy together
	# The following example allows a front-end machine to proxy a virtual host through to a server running
 	# on another machine. In the example, a virtual host of the same name is configured on a machine at
	# XXX.XXX.XXX1.2. The ProxyPreserveHost On directive is used so that the desired hostname is passed through,
	# in case we are proxying multiple hostnames to a single machine.
	<VirtualHost *:*>
	    ProxyPreserveHost On
	    ProxyPass        "/" "http://XXX.XXX.XXX1.2/"
	    ProxyPassReverse "/" "http://XXX.XXX.XXX1.2/"
	    ServerName hostname.example.com
	</VirtualHost>

9) Using _default_ vhosts
	# Catching every request to any unspecified IP address and port, i.e., an address/port combination that is not 
	# used for any other virtual host.
	<VirtualHost _default_:*>	//* Using such a default vhost with a wildcard port effectively prevents any
	    DocumentRoot "/www/default"	//* request going to the main server.
	</VirtualHost>

10) Migrating a name-based vhost to an IP-based vhost
	# The name-based vhost with the hostname www.example.org (from our name-based example, setup 2) should get its 
	# own IP address. To avoid problems with name servers or proxies who cached the old IP address for the name-
	# based vhost we want to provide both variants during a migration phase.
	Listen 80
	ServerName www.example.com
	DocumentRoot "/www/example1"
	<VirtualHost XXX.XXX.XXX.40 XXX.XXX.XXX.50>
	    DocumentRoot "/www/example2"
	    ServerName www.example.org
	    # ...
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40>
	    DocumentRoot "/www/example3"
	    ServerName www.example.net
	    ServerAlias *.example.net
	    # ...
	</VirtualHost>

11) Using the ServerPath directive
	# We have a server with two name-based vhosts. In order to match the correct virtual host a client must send
	# the correct Host: header. Old HTTP/1.0 clients do not send such a header and Apache has no clue what vhost 
	# the client tried to reach (and serves the request from the primary vhost). To provide as much backward
	# compatibility as possible we create a primary vhost which returns a single page containing links with an URL
	# prefix to the name-based virtual hosts.
	<VirtualHost XXX.XXX.XXX.40>
	    # primary vhost
	    DocumentRoot "/www/subdomain"
	    RewriteEngine On
	    RewriteRule "." "/www/subdomain/index.html"
	    # ...
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40>
	    DocumentRoot "/www/subdomain/sub1"
	    ServerName www.sub1.domain.tld
	    ServerPath "/sub1/"
	    RewriteEngine On
	    RewriteRule "^(/sub1/.*)" "/www/subdomain$1"
	    # ...
	</VirtualHost>
	<VirtualHost XXX.XXX.XXX.40>
	    DocumentRoot "/www/subdomain/sub2"
	    ServerName www.sub2.domain.tld
	    ServerPath "/sub2/"
	    RewriteEngine On
	    RewriteRule "^(/sub2/.*)" "/www/subdomain$1"
	    # ...
	</VirtualHost>
	# Due to the ServerPath directive a request to the URL http://www.sub1.domain.tld/sub1/ is always served from
	# the sub1-vhost. 
	# A request to the URL http://www.sub1.domain.tld/ is only served from the sub1-vhost if the client sent a
	# correct Host: header. If no Host: header is sent the client gets the information page from the primary host.
	# Please note that there is one oddity: A request to http://www.sub2.domain.tld/sub1/ is also served from the 
	# sub1-vhost if the client sent no Host: header.
	# The RewriteRule directives are used to make sure that a client which sent a correct Host: header can use both
	# URL variants, i.e., with or without URL prefix.
















